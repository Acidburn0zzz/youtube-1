#!/bin/bash

SECTION='# >> '

main(){

  declare -A keys
  declare -A vars
  declare -A sects

  mode=launch

  while getopts :eon option; do
    case "${option}" in
      e ) mode=edit ;;
      o ) mode=open ;;
      n ) mode=new  ;;
    esac
  done

  parsconfig

  displaymenu "$mode"
}

parsconfig(){
  eval "$(i3-msg -t get_config | awk -v sect="${SECTION}" '
  BEGIN {foundkeys=0;foundsects=0;foundvars=0}
  {

    if($1=="mode") {ismode=1}
    if($1=="}")    {ismode=0}

    gsub(/["]/,"\\\"",$0)

    original=$0

    for(k in variables){
      gsub("[$]"k,variables[k],$0)
    }

    if($1=="bindsym" && ismode!=1){

      gsub("[$]","\\$",original)

      if($0!~"exec"){msg="i3-msg "}
      else {msg=""}

      gsub(/bindsym|--release|exec|--no-startup-id/,"",$0)
      
      gsub("+","",$1)

      sub("Mod4","#",$1)
      sub("Mod1","!",$1)
      sub("Control","^",$1)
      sub("Shift","+",$1)

      bindsym=$1
      $1=""
      sub(/^[[:space:]]*/,"",$0)
      cmd=$0
      realcmd=msg cmd

      print "keys[" foundkeys "-bindsym]=\"" bindsym "\""
      print "keys[" foundkeys "-cmd]=\"" cmd "\""
      print "keys[" foundkeys "-realcmd]=\"" realcmd "\""
      print "keys[" foundkeys "-original]=\"" original "\""

      foundkeys++
    }

    #  $super bindsym Mod4
    if($1=="set"){
      sub("[$]","",$2)
      uservar=$2
      $1=$2=""
      sub(/^[[:space:]]*/,"",$0)
      userval=$0
      variables[uservar]=userval
      print "vars[" foundvars "-var]=\"" uservar "\""
      print "vars[" foundvars "-val]=\"" userval "\""
      foundvars++
    }

    if($0 ~ "^"sect){
      sub(sect,"",$0)
      print "sects[" foundsects "-name]=\"" $0 "\""
      print "sects[" foundsects "-line]=\"" NR "\""
      foundsects++
    }
    
  }

  END {
    print "foundkeys=" foundkeys
    print "foundsects=" foundsects
    print "foundvars=" foundvars
  }

  ')"
}

displaymenu(){

  mode="$1"

  if [[ $mode = edit ]]; then 
    promptstring="edit line: "
  elif [[ $mode = launch ]]; then
   promptstring="launch command: "
  fi

  [[ $mode =~ edit|launch ]] && selected="$({
    for ((i=0;i<foundkeys;i++)); do
      printf '<span background="#222222" foreground="#eeeeee">%s</span> %s\n' \
             "${keys[${i}-bindsym]}" "${keys[${i}-cmd]}"
    done
  } | rofi -dmenu -format i -markup-rows -p "jjj $promptstring")"

  [[ $mode =~ new|open ]] && ((${#sects[@]}>0)) && selected="$({
    for ((i=0;i<foundsects;i++)); do
      echo "${sects[${i}-name]}"
    done
  } | rofi -dmenu -format i -markup-rows -p "select section:")"

  [[ -z $selected ]] && ((${#sects[@]}>0)) && exit 1

  [[ $mode =~ new|edit ]] && dunstify -r 123 -t 0 "$(helpmessage)"

  case $mode in
    open )
      num=${sects[${selected}-line]}
      for ((i=0;i<${#num};i++)); do numb+="${num:$i:1} " ;done
      sublime
      subl "$(getconfigpath)"
      sleep .2
      xdotool key Escape ${numb}g g
      exit
    ;;

    edit )
        oldline="${keys[${selected}-original]}"
        newline="$(rofi -dmenu -filter "$oldline" -theme-str '#entry {width: 100%;}')"

        [[ -z $newline ]] && dunstify -C 123 && exit 1

        i3configfile="$(getconfigpath)"

        i3-msg -t get_config | awk -v ol="$oldline" -v nl="$newline" '
                               {if(ol==$0) print nl; else print $0} 
                               ' > "$i3configfile"

      i3-msg reload
    ;;

    new )
      newline="$(rofi -p 'add new line:  ' -dmenu -theme-str '#entry {expand: true;}')"
      [[ -z $newline ]] && dunstify -C 123 &&  exit 1

      num=${sects[${selected}-line]}

      i3-msg -t get_config | awk -v num="$num" -v nl="$newline" '{
        if(prnt!=1 && NR>num && /./) {
          print nl
          print $0
          prnt=1
        } else print $0
      }' > "$(getconfigpath)"

      i3-msg -q reload
    ;;

    launch ) echo "${keys[${selected}-realcmd]}" ;;
  esac

  dunstify -C 123
}

getconfigpath(){
  i3 --moreversion | awk '$1=="Loaded"{
    $1=$2=$3=""
    sub(/[(].*[)]$/,"",$0)
    sub(/[[:space:]]*/,"",$0)
    sub(/[[:space:]]*$/,"",$0)
    print $0;exit
  }'
}

helpmessage(){
  [[ $mode = edit ]] && {
    ol="${keys[${selected}-original]}"
    echo "$ol"
    for ((i=0;i<${#ol};i++));do dsh+="-"; done
    echo "$dsh"
  }

  for ((i=0;i<foundvars;i++)); do
    printf '$%s\t%s\n' "${vars[${i}-var]}" "${vars[${i}-val]}"
  done
}

main "${@}"
